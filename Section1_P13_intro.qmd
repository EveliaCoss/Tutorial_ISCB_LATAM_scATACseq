# **Practical 13:** scATAC-seq Pre-Processing and Quality Control {#preprocessingQC .setup style="blue"}

In this step, we will demonstrate the following:

-   Import data generated by 10x Cell Ranger ATAC.
-   Understand the format and structure of scATAC-seq files.
-   Generate the corresponding annotations in the scATAC-seq dataset.
-   Perform quality control on the obtained sequences.
-   Apply normalization and dimensionality reduction to the dataset.
-   Implement non-linear dimensionality reduction and perform clustering of the cells.

## Dataset overview

For this tutorial, we will be analyzing a single-cell ATAC-seq dataset of human peripheral blood mononuclear cells (PBMCs) provided by 10x Genomics. The following files are used in this course, all available through the 10x Genomics website:

-   The [Raw data](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5): Filtered peak barcode matrix. File name: `Peak by cell matrix HDF5 (filtered)`. Format: h5 / hdf5.

-   The [Metadata](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv): Per-barcode fragment counts & metrics. `Per Barcode metrics` . Format: csv.

-   The [fragments file](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz): Barcoded and aligned fragment file. File name: `Fragments`. Format: tsv.gz.

-   The fragments file [index](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz.tbi): Fragments file index. File name: `Fragments index`. Format: tbi.

Our starting points is the [output](https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/using/count) of `cellranger-atac` (v2.1.0), a 10x Genomics software used for alignment peak calling and initial quality control (QC) of the assay on [10x PBMCs from healthy donor](https://www.10xgenomics.com/datasets/10k-human-pbmcs-atac-v2-chromium-controller-2-standard) (unimodal scATAC-seq assay).

::: {.callout-note collapse="true"}
### View data download code

Total 2.7 Gb

``` {.bash code-copy="true" eval="false"}
# Raw data
wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5
# metadata
wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv
# fragments file
wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz
# fragments index
wget https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz.tbi
```
:::

### Summary file metrics

According to the [data report](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_web_summary.html), we observed **10,246 PBMC** nuclei were recovered. ATAC libraries were generated as described in the Chromium Single Cell ATAC Reagent Kits User Guide (v2 chemistry) using the Chromium Controller and sequenced on Illumina NovaSeq 6000 to approximately 55 k read pairs per cell.

[![](img/summary.png)](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_web_summary.html)

::: {.callout-tip icon="false"}
**Green text** indicates that the key metrics are in the expected range while *red/yellow* text indicates errors/warnings. Descriptions of the metrics can also be found by clicking the icon `?` next to the section header. The summary tab reports various metrics including sample, sequencing, cells, cell clustering, insert sizes, targeting, and library complexity.
:::

If you want to know more information about how to analyze the report check this [information](https://cdn.10xgenomics.com/image/upload/v1660261285/support-documents/CG000202_TechnicalNote_InterpretingCellRangerATACWebSummaryFiles_RevB.pdf) or check this [web page](https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/output/summary).

### PBMCs

::: callout-note
Peripheral Blood Mononuclear Cells (PBMCs) are **all blood cells with a single nucleus**, including lymphocytes (T cells, B cells, and NK cells) and monocytes. Erythrocytes, platelets, and granulocytes are not considered PBMCs because they have either no nuclei or multiple nuclei. PBMCs play a crucial role in the immune system and serve as important tools for immunological research.
:::

[![Expected cell types in PBMCs](https://www.jpt.com/media/2e/78/79/1720076346/PBMCs-518x218.png){#fig-pbmcs}](https://www.jpt.com/support-contact/resources/pbmc/)

## Seurat + Signac Workflow

![Single-cell chromatin analysis workflow with Signac.](img/FigureSignac.jpg){#fig-signac}

#### **Pre-processing workflow**

```{mermaid}
%%| fig-width: 15
flowchart LR

  A(Import Data) --> B(Annotation)
 
  B --> C(Computing QC metrics)
 
  C --> D(Normalization and linear \ndimensional reduction)
  
  D --> E(Non-linear dimensional \nreduction and clustering)

```

## 📗 Step 1: Import Data

When pre-processing chromatin data, `Signac` uses information from 4 related **input files**, both of which can be created using Cell Ranger ATAC:

<div>

-   **Peak/Cell Matrix (raw data)**: Similar to the gene expression count matrix used in single-cell RNA-seq, but instead of genes, the *rows represent regions of the genome (peaks)* that indicate areas of *open chromatin*. Each value in the matrix represents the number of Tn5 integration sites for each barcode (cell) that map within each peak. More information about this file on the [10x Genomics website](https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/output/peaks).

-   **Metadata:** Cell Ranger ATAC identifies cells by determining whether each barcode corresponds to a cell from any species in the reference. It also generates QC data, including the number of fragments per barcode and ATAC signal, based on metrics like the overlap of fragments with transcription start sites (TSS) from the reference. This barcode-level information is compiled into a single output table. More information about this file on the [10x Genomics website](https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/output/singlecell).

-   **Fragment File**: Contains a complete list of all *unique fragments across all single cells*. Although it is larger and slower to process, and is stored on-disk (instead of in memory), its advantage is that it *includes all fragments associated with each cell, not just those that map to peaks*. More information about the fragment file can be found on the 10x Genomics [website](https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/output/fragments) or on the [sinto website](https://timoast.github.io/sinto/basic_usage.html#create-scatac-seq-fragments-file).

-   **Fragment index file:** The fragment index file enables fast access to specific fragments in a sequencing file by indexing their positions. This speeds up retrieval and improves analysis efficiency.

</div>

::: {.callout-note collapse="true"}
### What if I don't have a H5 file?

Then you can use other outputs from cellranger:

-   counts: `matrix.mtx`

-   barcodes: `barcodes.tsv`

-   peaks: `peaks.bed`

Alternatively, you might only have a `fragment file`. In this case you can create a count matrix using the [`FeatureMatrix()`](https://stuartlab.org/signac/reference/featurematrix) function. If you want to know about this check the [Signac tutorial](https://stuartlab.org/signac/articles/pbmc_vignette).
:::

```{r load packages, message=FALSE, warning=FALSE}
library(Signac)
library(Seurat) 
library(GenomicRanges) # genomic data manipulation
library(ggplot2) #vizualization
library(patchwork) # Vizualization 
library(EnsDb.Hsapiens.v86) # human genome hg38
library(future) # parallelization in Signac
```

```{r Settings on my computer, echo=FALSE, message=FALSE}
# Obtain versions
cat("R version:", R.version$version.string, "\n")
cat("Number of cores:", availableCores(), "\n")
packageVersion("Signac")
# parallelization options
plan("multicore", workers = 8)
plan()
# Increase the maximum memory usage
options(future.globals.maxSize = 14 * 1024^3)  # para 14 GB de RAM
```

### Create `ChromatinAssay`

The ATAC-seq data is stored using a custom assay, the `ChromatinAssay`. This enables some specialized functions for analysing genomic single-cell assays such as scATAC-seq. By printing the assay we can see some of the additional information that can be contained in the `ChromatinAssay`, including motif information, gene annotations, and genome information.

```{r create chromatinassay}
counts <- Read10X_h5(filename = "data/10k_pbmc_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5")
metadata <- read.csv(
  file = "data/10k_pbmc_ATACv2_nextgem_Chromium_Controller_singlecell.csv",
  header = TRUE,
  row.names = 1
)

chrom_assay <- CreateChromatinAssay(
  counts = counts,
  sep = c(":", "-"),
  fragments = "data/10k_pbmc_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz",
  min.cells = 10,
  min.features = 200
)

pbmc <- CreateSeuratObject(
  counts = chrom_assay,
  assay = "peaks",
  meta.data = metadata
)
```

Check global information

```{r}
pbmc
```

Check ATAC information

```{r}
pbmc[['peaks']]
```

We then remove features that correspond to chromosome scaffolds (e.g., `KI270713.1`) or any other sequences that are not part of the 22 standard autosomes or the two sex chromosomes (X and Y), ensuring that only well-characterized and fully assembled chromosomal regions are included in the analysis.We then remove the features that correspond to chromosome scaffolds e.g. (KI270713.1) or other sequences instead of the (22+2) standard chromosomes.

```{r remove peaks}
peaks.keep <- seqnames(granges(pbmc)) %in% standardChromosomes(granges(pbmc))
pbmc <- pbmc[as.vector(peaks.keep), ]
```

## ✒️ Step 2: Annotation

We can also add gene annotations to the `pbmc` object for the human genome. This will allow downstream functions to pull the gene annotation information directly from the object.

#### **Before annotation**

```{r before}
pbmc@assays$peaks@annotation
```

### Get gene annotations for the peaks and add to the object

From the [dataset summary](https://cf.10xgenomics.com/samples/cell-atac/2.1.0/10k_pbmc_ATACv2_nextgem_Chromium_Controller/10k_pbmc_ATACv2_nextgem_Chromium_Controller_web_summary.html), we can see that the reference package 10x Genomics used to perform the mapping was "GRCh38-2020-A", which [corresponds to](https://www.10xgenomics.com/support/software/cell-ranger/downloads/cr-ref-build-steps#ref-2020-a) the Ensembl v98 (hg38) patch release.

```{r, warning=FALSE}
# extract gene annotations from EnsDb
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
# change to UCSC style since the data was mapped to hg38
seqlevelsStyle(annotations) <- 'UCSC'
genome(annotations) <- "hg38"

#  Check chromosomes
seqlevels(annotations)

# add the gene information to the object
Annotation(pbmc) <- annotations

```

#### Other options

```{r h38 AnnotationHub, eval=FALSE, warning=FALSE}
library(AnnotationHub)
ah <- AnnotationHub()

# Search for the Ensembl 98 EnsDb for Homo sapiens on AnnotationHub
query(ah, "EnsDb.Hsapiens.v98")
ensdb_v98 <- ah[["AH75011"]]

# extract gene annotations from EnsDb
annotations <- GetGRangesFromEnsDb(ensdb = ensdb_v98)

# change to UCSC style since the data was mapped to hg38
seqlevels(annotations) <- paste0('chr', seqlevels(annotations))
genome(annotations) <- "hg38"

# add the gene information to the object
Annotation(pbmc) <- annotations
```

#### Older version (hg19)

```{r hg19, eval=FALSE}
# BiocManager::install(c('BSgenome.Hsapiens.UCSC.hg19', 'EnsDb.Hsapiens.v75'))
# first get some gene annotations for hg19
library(EnsDb.Hsapiens.v75)

# convert EnsDb to GRanges
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v75)

# convert to UCSC style
seqlevels(annotation) <- paste0('chr', seqlevels(annotation))
genome(annotation) <- "hg19"

# set gene annotations
Annotation(pbmc) <- annotation

# get gene annotation information
Annotation(pbmc)
```

#### Older version (hg19)

```{r, eval=FALSE}
library(EnsDb.Hsapiens.v75)

# extract gene annotations from EnsDb
annotation <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v75)

# change to UCSC style since the data was mapped to hg19
seqlevelsStyle(annotation) <- 'UCSC'

# add the gene information to the object
Annotation(pbmc) <- annotation
# check
head(seqlevels(pbmc))
```

For more details on [Data structures and object interaction](https://stuartlab.org/signac/articles/data_structures) in Signac. `EnsDb.Hsapiens.v86` was used for [Joint RNA and ATAC analysis: 10x multiomic](https://stuartlab.org/signac/articles/pbmc_multiomic). Informations about genome version can be found at this [link.](https://stuartlab.org/signac/1.2.0/articles/install)

After adding the gene annotation:

```{r after}
pbmc@assays$peaks@annotation
```

## 📕 Step 3: Computing QC metrics

We can now compute QC metrics for the scATAC-seq experiment. Below are the recommended metrics for assessing data quality. As with scRNA-seq, expected values may vary depending on factors such as biological system and cell viability.

-   **Nucleosome banding pattern:** The DNA fragment size histogram should show a distinct nucleosome banding pattern, indicating DNA wrapped around nucleosomes. We calculate this per cell and quantify the ratio of mononucleosomal to nucleosome-free fragments (stored as `nucleosome_signal`).

    -   ratio of nucleosome size fragments (147-294 nucleotides)

    -   nucleosome-free fragments (\<147 nucleotides)

-   **TSS enrichment score:** Defined by ENCODE, this score measures the ratio of fragments centered at transcription start sites (TSS) compared to flanking regions. *Poor experiments tend to have low TSS enrichment.* You can calculate it per cell using `TSSEnrichment()`, with results stored in the `TSS.enrichment` metadata column.

-   **Total fragments in peaks:** A measure of sequencing depth. Cells with very few reads may need to be excluded, while those with excessively high reads might indicate *doublets or artifacts*.

-   **Fraction of fragments in peaks:** This is the proportion of fragments falling within ATAC-seq peaks. Cells with low values (\<15-20%) may indicate low quality or technical artifacts and should be removed.

-   **Ratio of reads in blacklist regions:** The [ENCODE blacklist](https://github.com/Boyle-Lab/Blacklist) identifies regions prone to artefactual signal. Cells with a *high fraction of reads mapping to these regions should be excluded*. You can calculate this using `FractionCountsInRegion()` with the blacklist regions included in Signac.

These metrics can be obtained from Cell Ranger output or calculated for non-10x datasets using `Signac`.

[![Assessing ATAC-seq library quality. The schematic shows transposition events near genes, with TSS regions (±2 kb) aligned across the genome. Reads are aggregated into a 'meta-TSS' to calculate per-base enrichment scores, plotted along the ±2 kb region. From: Grandi, et al. 2022. Nature Protocols.](img/QC1.png){#fig-QC alt="Assessing ATAC-seq library quality. From: Grandi, et al. 2022. Nature Protocols."}](https://www.nature.com/articles/s41596-022-00692-9)

### Bioanalyzer results and TSS region

[![Bioanalyzer results and QC graph. d--f. Left: Bioanalyzer trace and gel. Middle: TSS enrichment plot. Right: fragment size distribution. From: Grandi, et al. 2022. Nature Protocols.](img/QC2.png){#fig-bioanalyzer}](https://www.nature.com/articles/s41596-022-00692-9)

-   **d.** Successful library (TSS score: 8.3) with clear nucleosomal periodicity.

-   **e.** Successful library (TSS score: 8.8) with minimal nucleosomal periodicity.

-   **f.** Unsuccessful library (TSS score: 1.7) with poor signal-to-background and low quality.

Large fragments (\>2,000 bp) appear in Bioanalyzer traces but not in sequencing data.

### Impact of Sample Type on Fragment Yield and Sequencing Quality

::: callout-note
-   **Scatterplot colored by point density:** This plot shows the `log10(unique nuclear fragments)` vs TSS enrichment score and indicates the thresholds used with dotted lines.

-   **Histogram:** These plot shows the fragment size distribution.
:::

[![BMMC QC graphs. From: ArchR tutorial](img/scATAC_BMMC_R1-TSS_by_Unique_Frags_1.png)](https://www.archrproject.com/bookdown/per-cell-quality-control.html)

[![PBMCs QC graphs. From: ArchR tutorial](img/scATAC_PBMC_R1-TSS_by_Unique_Frags_1.png)](https://www.archrproject.com/bookdown/per-cell-quality-control.html)

### ATAC-seq insert sizes disclose nucleosome positions

ATAC-seq paired-end reads provided detailed insights into nucleosome packing and positioning. The fragment size distribution from human chromatin showed clear 200 bp periodicity, indicating fragments protected by multiple nucleosomes.

[![ATAC-seq provides genome-wide information on chromatin compaction. Inset, log-transformed histogram shows clear periodicity persists to six nucleosomes. From: Buenrostro, et al. 2013. Nature.](img/nucleosomes.jpg){#fig-nucleosomes}](https://www.nature.com/articles/nmeth.2688)

Again in the code:

```{r QControl, message=FALSE, warning=FALSE}
# compute nucleosome signal score per cell
pbmc <- NucleosomeSignal(object = pbmc)

# compute TSS enrichment score per cell
pbmc <- TSSEnrichment(object = pbmc)

# add fraction of reads in peaks
pbmc$pct_reads_in_peaks <- pbmc$peak_region_fragments / pbmc$passed_filters * 100

# add blacklist ratio
pbmc$blacklist_ratio <- FractionCountsInRegion(
  object = pbmc, 
  assay = 'peaks',
  regions = blacklist_hg38_unified
)
```

The relationship between variables stored in the object metadata can be visualized using the [`DensityScatter()`](https://stuartlab.org/signac/reference/densityscatter) function. This can also be used to quickly find suitable cutoff values for different QC metrics by setting `quantiles=TRUE`:

```{r}
DensityScatter(pbmc, x = 'nCount_peaks', y = 'TSS.enrichment', log_x = TRUE, quantiles = TRUE)
```

We can also look at the fragment length periodicity for all the cells, and group by cells with high or low nucleosomal signal strength. You can see that cells that are outliers for the mononucleosomal / nucleosome-free ratio (based on the plots above) have different nucleosomal banding patterns. The remaining cells exhibit a pattern that is typical for a successful ATAC-seq experiment.

### Fragment size distribution

```{r, warning=FALSE}
pbmc$nucleosome_group <- ifelse(pbmc$nucleosome_signal > 4, 'NS > 4', 'NS < 4')
FragmentHistogram(object = pbmc, group.by = 'nucleosome_group')
```

We can plot the distribution of each QC metric separately using a violin plot:

```{r, warning=FALSE}
VlnPlot(
  object = pbmc,
  features = c('nCount_peaks', 'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal', 'pct_reads_in_peaks'),
  pt.size = 0.1,
  ncol = 5
)
```

Finally we remove cells that are outliers for these QC metrics. The exact QC thresholds used will need to be adjusted according to your dataset.

```{r subset QC}
pbmc <- subset(
  x = pbmc,
  subset = nCount_peaks > 9000 & 
    nCount_peaks < 100000 &
    pct_reads_in_peaks > 40 & # 40 % of the reads in the peaks
    blacklist_ratio < 0.01 & # more of 1 % of the reads mapeaning in blacklist ratio
    nucleosome_signal < 4 &
    TSS.enrichment > 4 # enrichment score
)
pbmc
```

```{r, echo=FALSE, message=FALSE}
gc()
```

::: callout-note
This code filters the `pbmc` object to retain only high-quality cells based on specific criteria:

-   **`nCount_peaks > 9000`**: Keeps cells with more than 9000 reads in accessible regions.

-   **`nCount_peaks < 100000`**: Removes cells with an excessive number of reads, likely artifacts.

-   **`pct_reads_in_peaks > 40`**: Retains cells where over 40% of reads fall within peaks (high-quality signal).

-   **`blacklist_ratio < 0.01`**: Excludes cells with more than 1% of reads in blacklisted regions (unreliable areas).

-   **`nucleosome_signal < 4`**: Keeps cells with low nucleosome signal, indicating accessible chromatin.

-   **`TSS.enrichment > 4`**: Retains cells with strong enrichment near transcription start sites (good data quality).
:::

## 📘 Step 4: Normalization and linear dimensional reduction (LSI)

-   ✅ **Normalization:** `Signac` performs *term frequency-inverse document frecuency* (TF-IDF) normalization, a two-step process that **adjusts for differences in sequencing depth across cells and assigns higher values to rare peaks***.* Run term frequency inverse document frequency (TF-IDF) normalization on a matrix using [`RunTFIDF()`](https://stuartlab.org/signac/reference/runtfidf).

    [![TF-IDF(term frequency-inverse document frequency). From: Almarashy, et al. 2023. IEEE Access](https://www.researchgate.net/publication/376247075/figure/fig2/AS:11431281209841725@1701888441866/TF-IDFTerm-Frequency-Inverse-Document-Frequency_W640.jpg){#fig-method}](https://ieeexplore.ieee.org/document/10343156)

::: callout-note
## More information

**Term-Frequency Inverse-Document-Frequency (TF-IDF)** is a technique commonly used in text processing, but in the context of **scATAC-seq** (single-cell Assay for Transposase-Accessible Chromatin sequencing), it is adapted to quantify and normalize chromatin accessibility signals across different cells.

Here's how this concept is applied in **scATAC-seq**:

1.  **Term Frequency (TF)**: In scATAC-seq, "terms" correspond to **peaks of chromatin accessibility**, and the "document" is an individual cell. "TF" measures how frequently a given accessible site (a peak) is present in a particular cell. Essentially, it represents the frequency of accessibility of a peak within a cell.

2.  **Inverse Document Frequency (IDF)**: "IDF" measures how common or rare a peak is across all cells. If a peak is present in many cells, its IDF will be low because it is not informative. Conversely, if a peak is present only in a few cells, its IDF will be high, reflecting its specificity.

3.  **Application in scATAC-seq**: The purpose of using TF-IDF in scATAC-seq is to improve the representation of accessibility data. Given the high sparsity of single-cell data and the binary nature of accessibility (present or absent), applying TF-IDF helps to **highlight peaks that are specific to certain cells**. This enables better downstream analysis, such as dimensionality reduction or clustering, to capture biological differences between cells more accurately.

    -   **Summary:**

        -   **TF** measures how frequently a peak is accessible in a cell.

        -   **IDF** penalizes peaks that are accessible in many cells and gives more weight to those specific to fewer cells.

        -   **TF-IDF in scATAC-seq** is used to normalize the data, providing a better representation of chromatin accessibility for analyses like clustering or dimensionality reduction.
:::

-   ✅ **Feature selection:** Unlike scRNA-seq, scATAC-seq has low dynamic range, making variable feature selection difficult.

    -   A\) Instead, we can choose to use only the top n% of features (peaks) for dimensional reduction, or remove features present in less than n cells with the [`FindTopFeatures()`](https://stuartlab.org/signac/reference/findtopfeatures) function.

    -   B\) Features used for dimensional reduction are automatically set as `VariableFeatures()` for the Seurat object by this function.

        > **NOTE:** Even when using all features, similar results are observed, with faster runtimes when using a subset (e.g., the top 25% of peaks with min.cutoff = 'q75').

-   ✅ **Dimension reduction:** *Singular Value Decomposition* (SVD) is applied to the TF-IDF matrix using the selected peaks, generating a **reduced dimensional representation** similar to PCA in scRNA-seq analyses. Run singular value decomposition using [RunSVD()](https://stuartlab.org/signac/reference/runsvd).

The combined steps of TF-IDF followed by SVD are known as **latent semantic indexing (LSI)**, and were first introduced for the analysis of scATAC-seq data by [Cusanovich et al. 2015](https://www.science.org/doi/10.1126/science.aab1601).

```{r analysis}
pbmc <- RunTFIDF(pbmc)
pbmc <- FindTopFeatures(pbmc, min.cutoff = 'q0')
pbmc <- RunSVD(pbmc)
```

```{r, echo=FALSE, message=FALSE}
gc()
```

The first LSI component often captures sequencing depth (technical variation) rather than biological variation. If this is the case, the component should be removed from downstream analysis. We can assess the correlation between each LSI component and sequencing depth using the [`DepthCor()`](https://stuartlab.org/signac/reference/depthcor) function:

```{r Components}
DepthCor(pbmc)
```

Here we see there is a very strong correlation between the first LSI component and the total number of counts for the cell. We will perform downstream steps without this component as we don't want to group cells together based on their total sequencing depth, but rather by their patterns of accessibility at cell-type-specific peaks.

::: callout-important
## Why did we eliminate component 1?

Component 1 is often removed in dimensionality reduction analyses because it *may capture non-biological variability or technical artifacts rather than biologically relevant patterns*. Removing it helps focus on components that better reflect the *true biological structure of the data*.
:::

## 📙 Step 5: Non-linear dimensional reduction and clustering

Now that the cells are embedded in a low-dimensional space we can use methods commonly applied for the analysis of scRNA-seq data to perform graph-based clustering and non-linear dimension reduction for visualization. The functions [`RunUMAP()`](https://satijalab.org/seurat/reference/runumap), [`FindNeighbors()`](https://satijalab.org/seurat/reference/findneighbors), and [`FindClusters()`](https://satijalab.org/seurat/reference/findclusters) all come from the `Seurat` package.

### Perform UMAP

Uniform Manifold Approximation and Projection (UMAP) is a dimension reduction technique that can be used for visualisation similarly to t-SNE, but also for **general non-linear dimension reduction.** It was proposed by [McInnes *et al.* 2018](https://arxiv.org/abs/1802.03426).

This results in the creation of two new parameters UMAP 1 and UMAP 2. UMAP captures **local relationships within a cluster** as well as global relationships between distinct clusters.

::: callout-note
While **PCA** assumes that the variation of interest follows a specific distribution (generally normal), **UMAP** is more flexible and can learn complex, non-linear distributions directly from the data. This flexibility allows UMAP to better separate clusters, particularly when some clusters are more similar to each other. As a result, UMAP often excels at revealing nuanced relationships and improving cluster separation in datasets with intricate patterns.

**UMAP Visualization - bulk RNA-seq**

Also you can extract the normalized counts data from the `DESeqDataSet` object and perform UMAP on the normalized data using `umap()` from the `umap` package.
:::

```{r, warning=FALSE}
pbmc <- RunUMAP(object = pbmc, reduction = 'lsi', dims = 2:30)
pbmc <- FindNeighbors(object = pbmc, reduction = 'lsi', dims = 2:30)
pbmc <- FindClusters(object = pbmc, verbose = FALSE, algorithm = 3)
DimPlot(object = pbmc, label = TRUE) + NoLegend()
```

Now, we can cluster the cells to find groups that belong to the same cell types. It is possible to plot the results from the SVD, but these often are not informative. Instead, we use the UMAP algorithm, which shows a better separation between the cell types. If you are interested, the paper describing UMAP can be found [here](https://arxiv.org/abs/1802.03426).

```{r}
p1 <- DimPlot(object = pbmc, label = TRUE, dims = c(2, 3), reduction = "lsi") +
    NoLegend()  +
    ggtitle('SVD')

p2 <- DimPlot(object = pbmc, label = TRUE) +
    NoLegend() +
    ggtitle('UMAP')

p1 | p2
```

```{r save, echo=FALSE, message=FALSE}
gc()
save(pbmc, file = "data/pbmc.RData")
```

```{r}
sessionInfo()
```

## References

https://www.jpt.com/support-contact/resources/pbmc/

[Data structures and object interaction](https://stuartlab.org/signac/articles/data_structures)

[Joint RNA and ATAC analysis: 10x multiomic](https://stuartlab.org/signac/articles/pbmc_multiomic).

https://stuartlab.org/signac/1.2.0/articles/install

https://stuartlab.org/signac/articles/pbmc_multiomic

https://support.10xgenomics.com/single-cell-atac/software/pipelines/latest/output/metrics

https://www.nature.com/articles/nmeth.2688

[Analyzing adult mouse brain scATAC-seq](https://stuartlab.org/signac/articles/mouse_brain_vignette)

Raton https://rpubs.com/kshridevi/1176302

https://ieeexplore.ieee.org/document/10343156

https://stuartlab.org/signac/articles/pbmc_vignette

https://arxiv.org/abs/1802.03426

https://alexslemonade.github.io/refinebio-examples/03-rnaseq/dimension-reduction_rnaseq_02_umap.html#4_UMAP_Visualization\_-\_RNA-seq

[UMAP Github](https://github.com/lmcinnes/umap)
